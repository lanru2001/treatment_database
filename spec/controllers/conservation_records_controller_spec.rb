# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ConservationRecordsController, type: :controller do
  include Devise::TestHelpers

  # This should return the minimal set of attributes required to create a valid
  # ConservationRecord. As you add validations to ConservationRecord, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      department: "Department A",
      title: "An Interesting Book",
      author: "A Good Writer",
      imprint: "Dutton",
      call_number: "P102.3294.3920",
      item_record_number: "i452",
      digitization: true,
      date_recieved_in_preservation_services: Date.new
    }
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  def sign_in_user(user)
    sign_in user
  end

  before do
    user = create(:user)
    sign_in_user(user)
  end

  describe 'GET #index' do
    it 'returns a success response' do
      ConservationRecord.create! valid_attributes
      get :index, params: {}
      puts response
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      conservation_record = ConservationRecord.create! valid_attributes
      get :show, params: { id: conservation_record.to_param }
      expect(response).to be_successful
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new
      expect(response).to be_successful
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      conservation_record = ConservationRecord.create! valid_attributes
      get :edit, params: { id: conservation_record.to_param }
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new ConservationRecord' do
        expect do
          post :create, params: { conservation_record: valid_attributes }
        end.to change(ConservationRecord, :count).by(1)
      end

      it 'redirects to the created conservation_record' do
        post :create, params: { conservation_record: valid_attributes }
        expect(response).to redirect_to(ConservationRecord.last)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { conservation_record: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested conservation_record' do
        conservation_record = ConservationRecord.create! valid_attributes
        put :update, params: { id: conservation_record.to_param, conservation_record: new_attributes }
        conservation_record.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the conservation_record' do
        conservation_record = ConservationRecord.create! valid_attributes
        put :update, params: { id: conservation_record.to_param, conservation_record: valid_attributes }
        expect(response).to redirect_to(conservation_record)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        conservation_record = ConservationRecord.create! valid_attributes
        put :update, params: { id: conservation_record.to_param, conservation_record: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested conservation_record' do
      conservation_record = ConservationRecord.create! valid_attributes
      expect do
        delete :destroy, params: { id: conservation_record.to_param }
      end.to change(ConservationRecord, :count).by(-1)
    end

    it 'redirects to the conservation_records list' do
      conservation_record = ConservationRecord.create! valid_attributes
      delete :destroy, params: { id: conservation_record.to_param }
      expect(response).to redirect_to(conservation_records_url)
    end
  end
end
